// Code generated by protoc-gen-go. DO NOT EDIT.
// source: identity.proto

/*
Package identity is a generated protocol buffer package.

It is generated from these files:
	identity.proto

It has these top-level messages:
	CreateIdentityRequest
	RetrieveIdentityRequest
	VerifyIdentityRequest
	IdentityResponse
	Identity
	Error
	SimpleResponse
*/
package identity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateIdentityRequest struct {
	Identity *Identity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	Secret   string    `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
}

func (m *CreateIdentityRequest) Reset()                    { *m = CreateIdentityRequest{} }
func (m *CreateIdentityRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateIdentityRequest) ProtoMessage()               {}
func (*CreateIdentityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateIdentityRequest) GetIdentity() *Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *CreateIdentityRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type RetrieveIdentityRequest struct {
	ClientID string `protobuf:"bytes,1,opt,name=clientID" json:"clientID,omitempty"`
}

func (m *RetrieveIdentityRequest) Reset()                    { *m = RetrieveIdentityRequest{} }
func (m *RetrieveIdentityRequest) String() string            { return proto.CompactTextString(m) }
func (*RetrieveIdentityRequest) ProtoMessage()               {}
func (*RetrieveIdentityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RetrieveIdentityRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type VerifyIdentityRequest struct {
	Secret string `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
}

func (m *VerifyIdentityRequest) Reset()                    { *m = VerifyIdentityRequest{} }
func (m *VerifyIdentityRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyIdentityRequest) ProtoMessage()               {}
func (*VerifyIdentityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VerifyIdentityRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type IdentityResponse struct {
	Success  bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Identity *Identity `protobuf:"bytes,2,opt,name=identity" json:"identity,omitempty"`
	Error    *Error    `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *IdentityResponse) Reset()                    { *m = IdentityResponse{} }
func (m *IdentityResponse) String() string            { return proto.CompactTextString(m) }
func (*IdentityResponse) ProtoMessage()               {}
func (*IdentityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IdentityResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *IdentityResponse) GetIdentity() *Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *IdentityResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Identity struct {
	ClientID   string `protobuf:"bytes,1,opt,name=clientID" json:"clientID,omitempty"`
	ClientType string `protobuf:"bytes,2,opt,name=clientType" json:"clientType,omitempty"`
}

func (m *Identity) Reset()                    { *m = Identity{} }
func (m *Identity) String() string            { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()               {}
func (*Identity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Identity) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *Identity) GetClientType() string {
	if m != nil {
		return m.ClientType
	}
	return ""
}

type Error struct {
	ErrorCode   string `protobuf:"bytes,1,opt,name=errorCode" json:"errorCode,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Error) GetErrorCode() string {
	if m != nil {
		return m.ErrorCode
	}
	return ""
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type SimpleResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *SimpleResponse) Reset()                    { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string            { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()               {}
func (*SimpleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SimpleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SimpleResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateIdentityRequest)(nil), "identity.CreateIdentityRequest")
	proto.RegisterType((*RetrieveIdentityRequest)(nil), "identity.RetrieveIdentityRequest")
	proto.RegisterType((*VerifyIdentityRequest)(nil), "identity.VerifyIdentityRequest")
	proto.RegisterType((*IdentityResponse)(nil), "identity.IdentityResponse")
	proto.RegisterType((*Identity)(nil), "identity.Identity")
	proto.RegisterType((*Error)(nil), "identity.Error")
	proto.RegisterType((*SimpleResponse)(nil), "identity.SimpleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IdentityService service

type IdentityServiceClient interface {
	Create(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	Retrieve(ctx context.Context, in *RetrieveIdentityRequest, opts ...grpc.CallOption) (*IdentityResponse, error)
	Verify(ctx context.Context, in *VerifyIdentityRequest, opts ...grpc.CallOption) (*IdentityResponse, error)
	Delete(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type identityServiceClient struct {
	cc *grpc.ClientConn
}

func NewIdentityServiceClient(cc *grpc.ClientConn) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) Create(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/identity.IdentityService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) Retrieve(ctx context.Context, in *RetrieveIdentityRequest, opts ...grpc.CallOption) (*IdentityResponse, error) {
	out := new(IdentityResponse)
	err := grpc.Invoke(ctx, "/identity.IdentityService/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) Verify(ctx context.Context, in *VerifyIdentityRequest, opts ...grpc.CallOption) (*IdentityResponse, error) {
	out := new(IdentityResponse)
	err := grpc.Invoke(ctx, "/identity.IdentityService/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) Delete(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := grpc.Invoke(ctx, "/identity.IdentityService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdentityService service

type IdentityServiceServer interface {
	Create(context.Context, *CreateIdentityRequest) (*SimpleResponse, error)
	Retrieve(context.Context, *RetrieveIdentityRequest) (*IdentityResponse, error)
	Verify(context.Context, *VerifyIdentityRequest) (*IdentityResponse, error)
	Delete(context.Context, *Identity) (*SimpleResponse, error)
}

func RegisterIdentityServiceServer(s *grpc.Server, srv IdentityServiceServer) {
	s.RegisterService(&_IdentityService_serviceDesc, srv)
}

func _IdentityService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).Create(ctx, req.(*CreateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityService/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).Retrieve(ctx, req.(*RetrieveIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).Verify(ctx, req.(*VerifyIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).Delete(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "identity.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IdentityService_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _IdentityService_Retrieve_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _IdentityService_Verify_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IdentityService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity.proto",
}

func init() { proto.RegisterFile("identity.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x4d, 0xa4, 0x31, 0x9d, 0x42, 0x2b, 0x03, 0xd5, 0x10, 0x44, 0xeb, 0x82, 0xd0, 0x53,
	0x85, 0x8a, 0xe0, 0xbd, 0xad, 0xa5, 0x78, 0x32, 0x15, 0xaf, 0xa2, 0xe9, 0x08, 0x0b, 0x35, 0x89,
	0xbb, 0xdb, 0x42, 0xcf, 0xfe, 0x19, 0x7f, 0xa6, 0xb8, 0x49, 0x76, 0x5b, 0x8d, 0xb5, 0xb7, 0xcc,
	0xe4, 0x9b, 0x37, 0xfb, 0x36, 0x2f, 0xd0, 0xe4, 0x33, 0x4a, 0x14, 0x57, 0xab, 0x5e, 0x26, 0x52,
	0x95, 0xa2, 0x5f, 0xd6, 0xec, 0x09, 0xda, 0x03, 0x41, 0xcf, 0x8a, 0x26, 0x45, 0x27, 0xa2, 0xf7,
	0x05, 0x49, 0x85, 0x3d, 0x30, 0x50, 0xe0, 0x74, 0x9c, 0x6e, 0xa3, 0x8f, 0x3d, 0xa3, 0x62, 0x60,
	0xc3, 0xe0, 0x11, 0x78, 0x92, 0x62, 0x41, 0x2a, 0x70, 0x3b, 0x4e, 0xb7, 0x1e, 0x15, 0x15, 0xbb,
	0x86, 0xe3, 0x88, 0x94, 0xe0, 0xb4, 0xfc, 0xb5, 0x22, 0x04, 0x3f, 0x9e, 0x73, 0x4a, 0xd4, 0x64,
	0xa8, 0x57, 0xd4, 0x23, 0x53, 0xb3, 0x4b, 0x68, 0x3f, 0x92, 0xe0, 0xaf, 0xab, 0x9f, 0x43, 0x76,
	0x8f, 0xb3, 0xb1, 0xe7, 0xc3, 0x81, 0x43, 0xcb, 0xca, 0x2c, 0x4d, 0x24, 0x61, 0x00, 0x07, 0x72,
	0x11, 0xc7, 0x24, 0xa5, 0xa6, 0xfd, 0xa8, 0x2c, 0x37, 0xec, 0xb9, 0x3b, 0xd8, 0xbb, 0x80, 0x1a,
	0x09, 0x91, 0x8a, 0x60, 0x5f, 0xc3, 0x2d, 0x0b, 0x8f, 0xbe, 0xdb, 0x51, 0xfe, 0x96, 0xdd, 0x82,
	0x5f, 0x0e, 0x6f, 0xb3, 0x87, 0xa7, 0x00, 0xf9, 0xf3, 0xc3, 0x2a, 0xa3, 0xe2, 0xc6, 0xd6, 0x3a,
	0x6c, 0x0c, 0x35, 0xad, 0x8b, 0x27, 0x50, 0xd7, 0xca, 0x83, 0x74, 0x46, 0x85, 0x8a, 0x6d, 0x60,
	0x07, 0x1a, 0x33, 0x92, 0xb1, 0xe0, 0x99, 0xe2, 0x69, 0x52, 0xe8, 0xac, 0xb7, 0xd8, 0x3d, 0x34,
	0xa7, 0xfc, 0x2d, 0x9b, 0xd3, 0x0e, 0x77, 0x62, 0x3c, 0xba, 0xdb, 0x3c, 0xf6, 0x3f, 0x5d, 0x68,
	0x95, 0x26, 0xa7, 0x24, 0x96, 0x3c, 0x26, 0x1c, 0x81, 0x97, 0xc7, 0x08, 0xcf, 0xec, 0x54, 0x65,
	0xb0, 0xc2, 0xc0, 0x02, 0x9b, 0x27, 0x63, 0x7b, 0x78, 0x07, 0x7e, 0x19, 0x16, 0x3c, 0xb7, 0xdc,
	0x1f, 0x01, 0x0a, 0xc3, 0x8a, 0x4f, 0x66, 0xc5, 0xc6, 0xe0, 0xe5, 0x11, 0x5a, 0x3f, 0x53, 0x65,
	0xa8, 0xfe, 0x11, 0xba, 0x01, 0x6f, 0x48, 0x73, 0x52, 0x84, 0x15, 0x19, 0xd9, 0xe6, 0xe7, 0xc5,
	0xd3, 0xbf, 0xdb, 0xd5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x3e, 0x7b, 0x76, 0x80, 0x03,
	0x00, 0x00,
}
